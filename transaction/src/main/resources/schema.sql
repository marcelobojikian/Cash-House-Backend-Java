
DROP TABLE IF EXISTS USERS CASCADE;

DROP TABLE IF EXISTS DASHBOARD_CASHIER;
DROP TABLE IF EXISTS DASHBOARD_FLATMATE;
DROP TABLE IF EXISTS DASHBOARD_GUEST;
DROP TABLE IF EXISTS DASHBOARD_TRANSACTION;
DROP TABLE IF EXISTS DASHBOARD;
DROP TABLE IF EXISTS TRANSACTION;
DROP TABLE IF EXISTS CASHIER;
DROP TABLE IF EXISTS FLATMATE;
DROP TABLE IF EXISTS LANGUAGE;

CREATE TABLE USERS (
  ID		SERIAL 		  PRIMARY KEY AUTO_INCREMENT(1001,1),
  USERNAME  VARCHAR(256)  NOT NULL,
  PASSWORD  VARCHAR(256)  NOT NULL,
  ENABLED   BOOLEAN       NOT NULL,
  ROLES		VARCHAR(256)  NOT NULL,
  DASHBOARD_ID BIGINT
);

--
-- App tables
--

CREATE TABLE FLATMATE (
	ID SERIAL PRIMARY KEY AUTO_INCREMENT(1001,1),
	NICKNAME VARCHAR(255)
);

CREATE TABLE DASHBOARD (
	ID SERIAL PRIMARY KEY AUTO_INCREMENT(1001,1),
	OWNER_ID BIGINT,
	FOREIGN KEY (OWNER_ID) REFERENCES USERS(ID)
);
 
ALTER TABLE USERS
ADD FOREIGN KEY (DASHBOARD_ID) REFERENCES DASHBOARD(ID);

CREATE TABLE CASHIER (
	ID SERIAL PRIMARY KEY AUTO_INCREMENT(1001,1),
	NAME VARCHAR(200),
	BALANCE DECIMAL(12,2),
	STARTED DECIMAL(12,2)
);

CREATE TABLE TRANSACTION (
	ID SERIAL PRIMARY KEY AUTO_INCREMENT(1001,1),
	FLATMATE_ID BIGINT,
	CASHIER_ID BIGINT,
	STATUS VARCHAR(20),
	ACTION VARCHAR(20),
	VALUE DECIMAL(12,2),
	CREATED_AT TIMESTAMP,
	UPDATED_AT TIMESTAMP,
	FOREIGN KEY (FLATMATE_ID) REFERENCES FLATMATE(ID),
	FOREIGN KEY (CASHIER_ID) REFERENCES CASHIER(ID)
);

CREATE TABLE DASHBOARD_CASHIER (
	ID_DASHBOARD BIGINT,
	ID_CASHIER BIGINT,
	FOREIGN KEY (ID_DASHBOARD) REFERENCES DASHBOARD(ID),
	FOREIGN KEY (ID_CASHIER) REFERENCES CASHIER(ID)
);

CREATE TABLE DASHBOARD_FLATMATE (
	ID_DASHBOARD BIGINT,
	ID_FLATMATE BIGINT,
	FOREIGN KEY (ID_DASHBOARD) REFERENCES DASHBOARD(ID),
	FOREIGN KEY (ID_FLATMATE) REFERENCES FLATMATE(ID)
);

CREATE TABLE DASHBOARD_GUEST (
	ID_DASHBOARD BIGINT,
	ID_PROFILE BIGINT,
	FOREIGN KEY (ID_DASHBOARD) REFERENCES DASHBOARD(ID),
	FOREIGN KEY (ID_PROFILE) REFERENCES USERS(ID)
);

CREATE TABLE DASHBOARD_TRANSACTION (
	ID_DASHBOARD BIGINT,
	ID_TRANSACTION BIGINT,
	FOREIGN KEY (ID_DASHBOARD) REFERENCES DASHBOARD(ID),
	FOREIGN KEY (ID_TRANSACTION) REFERENCES TRANSACTION(ID)
);

CREATE TABLE LANGUAGE (
	ID SERIAL PRIMARY KEY,
	LOCALE VARCHAR(5), 
	MESSAGE_KEY VARCHAR(255),
	MESSAGE_CONTENT VARCHAR(255)
);

--
-- ACLs tables
--

DROP TABLE IF EXISTS ACL_SID;
DROP TABLE IF EXISTS ACL_CLASS;
DROP TABLE IF EXISTS ACL_OBJECT_IDENTITY;
DROP TABLE IF EXISTS ACL_ENTRY;

--
-- Tables ACL
--

CREATE TABLE IF NOT EXISTS ACL_SID (
  ID BIGINT(20) NOT NULL AUTO_INCREMENT,
  PRINCIPAL TINYINT(1) NOT NULL,
  SID VARCHAR(100) NOT NULL,
  PRIMARY KEY (ID),
  UNIQUE KEY UNIQUE_UK_1 (SID,PRINCIPAL)
);

CREATE TABLE IF NOT EXISTS ACL_CLASS (
  ID BIGINT(20) NOT NULL AUTO_INCREMENT,
  CLASS VARCHAR(255) NOT NULL,
  PRIMARY KEY (ID),
  UNIQUE KEY UNIQUE_UK_2 (CLASS)
);
 
CREATE TABLE IF NOT EXISTS ACL_ENTRY (
  ID BIGINT(20) NOT NULL AUTO_INCREMENT,
  ACL_OBJECT_IDENTITY BIGINT(20) NOT NULL,
  ACE_ORDER INT(11) NOT NULL,
  SID BIGINT(20) NOT NULL,
  MASK INT(11) NOT NULL,
  GRANTING TINYINT(1) NOT NULL,
  AUDIT_SUCCESS TINYINT(1) NOT NULL,
  AUDIT_FAILURE TINYINT(1) NOT NULL,
  PRIMARY KEY (ID),
  UNIQUE KEY UNIQUE_UK_4 (ACL_OBJECT_IDENTITY,ACE_ORDER)
);
 
CREATE TABLE IF NOT EXISTS ACL_OBJECT_IDENTITY (
  ID BIGINT(20) NOT NULL AUTO_INCREMENT,
  OBJECT_ID_CLASS BIGINT(20) NOT NULL,
  OBJECT_ID_IDENTITY BIGINT(20) NOT NULL,
  PARENT_OBJECT BIGINT(20) DEFAULT NULL,
  OWNER_SID BIGINT(20) DEFAULT NULL,
  ENTRIES_INHERITING TINYINT(1) NOT NULL,
  PRIMARY KEY (ID),
  UNIQUE KEY UNIQUE_UK_3 (OBJECT_ID_CLASS,OBJECT_ID_IDENTITY)
);
 
ALTER TABLE ACL_ENTRY
ADD FOREIGN KEY (ACL_OBJECT_IDENTITY) REFERENCES ACL_OBJECT_IDENTITY(ID);

ALTER TABLE ACL_ENTRY
ADD FOREIGN KEY (SID) REFERENCES ACL_SID(ID);
 
--
-- Constraints for table acl_object_identity
--
ALTER TABLE ACL_OBJECT_IDENTITY
ADD FOREIGN KEY (PARENT_OBJECT) REFERENCES ACL_OBJECT_IDENTITY (ID);

ALTER TABLE ACL_OBJECT_IDENTITY
ADD FOREIGN KEY (OBJECT_ID_CLASS) REFERENCES ACL_CLASS (ID);

ALTER TABLE ACL_OBJECT_IDENTITY
ADD FOREIGN KEY (OWNER_SID) REFERENCES ACL_SID (ID);


DROP TABLE IF EXISTS OAUTH_CLIENT_DETAILS;
DROP TABLE IF EXISTS OAUTH_CLIENT_TOKEN;
DROP TABLE IF EXISTS OAUTH_ACCESS_TOKEN;
DROP TABLE IF EXISTS OAUTH_REFRESH_TOKEN;
DROP TABLE IF EXISTS OAUTH_CODE;


CREATE TABLE OAUTH_CLIENT_DETAILS (
    CLIENT_ID VARCHAR(256) PRIMARY KEY,
    RESOURCE_IDS VARCHAR(256),
    CLIENT_SECRET VARCHAR(256),
    SCOPE VARCHAR(256),
    AUTHORIZED_GRANT_TYPES VARCHAR(256),
    WEB_SERVER_REDIRECT_URI VARCHAR(256),
    AUTHORITIES VARCHAR(256),
    ACCESS_TOKEN_VALIDITY INTEGER,
    REFRESH_TOKEN_VALIDITY INTEGER,
    ADDITIONAL_INFORMATION VARCHAR(4096),
    AUTOAPPROVE VARCHAR(256)
);

-- Oauth2 Token

CREATE TABLE OAUTH_CLIENT_TOKEN (
  TOKEN_ID VARCHAR(256),
  TOKEN BYTEA,
  AUTHENTICATION_ID VARCHAR(256) PRIMARY KEY,
  USER_NAME VARCHAR(256),
  CLIENT_ID VARCHAR(256)
);

CREATE TABLE OAUTH_ACCESS_TOKEN (
  TOKEN_ID VARCHAR(256),
  TOKEN BYTEA,
  AUTHENTICATION_ID VARCHAR(256),
  USER_NAME VARCHAR(256),
  CLIENT_ID VARCHAR(256),
  AUTHENTICATION BYTEA,
  REFRESH_TOKEN VARCHAR(256)
);

CREATE TABLE OAUTH_REFRESH_TOKEN (
  TOKEN_ID VARCHAR(256),
  TOKEN BYTEA,
  AUTHENTICATION BYTEA
);

CREATE TABLE OAUTH_CODE (
  CODE VARCHAR(256), AUTHENTICATION BYTEA
);


